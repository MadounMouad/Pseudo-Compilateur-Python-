Terminals which are not used

   T_semi_colon
   T_dot
   T_in
   T_notin
   T_tilde
   T_squarebleft
   T_squarebright


Grammar

    0 $accept: S $end

    1 S: file_input
    2  | T_eof

    3 file_input: /* empty */
    4           | T_newline file_input
    5           | stmt file_input

    6 stmt: simple_stmt T_newline
    7     | compound_stmt T_newline

    8 simple_stmt: T_break
    9            | T_continue
   10            | assign_stmt
   11            | expressions
   12            | return_stmt

   13 assign_stmt: T_name aff expression

   14 aff: T_eq
   15    | T_div_eq
   16    | T_star_eq
   17    | T_minus_eq
   18    | T_plus_eq
   19    | T_mod_eq

   20 arith_exp: atom
   21          | arith_exp T_plus arith_exp
   22          | arith_exp T_minus arith_exp
   23          | arith_exp T_star arith_exp
   24          | arith_exp T_divide arith_exp
   25          | arith_exp T_double_divide arith_exp
   26          | arith_exp T_double_star arith_exp
   27          | arith_exp T_mod arith_exp
   28          | T_minus arith_exp

   29 expression: expression T_or expression
   30           | arith_exp T_lt arith_exp
   31           | expression T_and expression
   32           | arith_exp T_gt arith_exp
   33           | arith_exp T_le arith_exp
   34           | arith_exp T_ge arith_exp
   35           | T_Lparan expression T_Rparan
   36           | arith_exp T_deq arith_exp
   37           | arith_exp T_noteq arith_exp
   38           | arith_exp

   39 expressions: expression
   40            | expression T_comma expressions

   41 atom: T_name
   42     | constant
   43     | T_none
   44     | T_true
   45     | T_false
   46     | func_call

   47 compound_stmt: if_stmt
   48              | while_stmt
   49              | for_stmt
   50              | func_def

   51 if_stmt: T_if expression T_colon block
   52        | T_if expression T_colon block elif_stmts

   53 elif_stmts: else_stmt
   54           | T_elif expression T_colon block elif_stmts

   55 else_stmt: T_else T_colon block

   56 while_stmt: T_while expression T_colon block

   57 for_stmt: T_for T_name T_from for_atom T_to for_atom T_with for_atom T_colon block

   58 for_atom: T_name
   59         | T_number

   60 block: simple_stmt
   61      | T_Lacco file_input T_Racco

   62 constant: T_number
   63         | T_string

   64 func_def: T_def T_name T_Lparan args T_Rparan T_colon block

   65 args: /* empty */
   66     | T_name args_list

   67 args_list: /* empty */
   68          | T_comma T_name args_list

   69 func_call: T_name T_Lparan call_args T_Rparan

   70 call_list: /* empty */
   71          | T_comma atom call_list

   72 call_args: /* empty */
   73          | T_name call_list
   74          | constant call_list

   75 return_stmt: T_return expression
   76            | T_return


Terminals, with rules where they appear

$end (0) 0
error (256)
T_name (258) 13 41 57 58 64 66 68 69 73
T_number (259) 59 62
T_string (260) 63
T_newline (261) 4 6 7
T_eof (262) 2
T_semi_colon (263)
T_Lacco (264) 61
T_Racco (265) 61
T_eq (266) 14
T_comma (267) 40 68 71
T_plus_eq (268) 18
T_minus_eq (269) 17
T_star_eq (270) 16
T_div_eq (271) 15
T_mod_eq (272) 19
T_while (273) 56
T_break (274) 8
T_continue (275) 9
T_return (276) 75 76
T_star (277) 23
T_Lparan (278) 35 64 69
T_Rparan (279) 35 64 69
T_dot (280)
T_if (281) 51 52
T_colon (282) 51 52 54 55 56 57 64
T_elif (283) 54
T_else (284) 55
T_for (285) 57
T_in (286)
T_or (287) 29
T_and (288) 31
T_lt (289) 30
T_gt (290) 32
T_deq (291) 36
T_ge (292) 34
T_le (293) 33
T_noteq (294) 37
T_notin (295)
T_from (296) 57
T_with (297) 57
T_to (298) 57
T_plus (299) 21
T_minus (300) 22 28
T_divide (301) 24
T_mod (302) 27
T_double_divide (303) 25
T_tilde (304)
T_double_star (305) 26
T_squarebleft (306)
T_squarebright (307)
T_none (308) 43
T_true (309) 44
T_false (310) 45
T_def (311) 64


Nonterminals, with rules where they appear

$accept (57)
    on left: 0
S (58)
    on left: 1 2, on right: 0
file_input (59)
    on left: 3 4 5, on right: 1 4 5 61
stmt (60)
    on left: 6 7, on right: 5
simple_stmt (61)
    on left: 8 9 10 11 12, on right: 6 60
assign_stmt (62)
    on left: 13, on right: 10
aff (63)
    on left: 14 15 16 17 18 19, on right: 13
arith_exp (64)
    on left: 20 21 22 23 24 25 26 27 28, on right: 21 22 23 24 25 26
    27 28 30 32 33 34 36 37 38
expression (65)
    on left: 29 30 31 32 33 34 35 36 37 38, on right: 13 29 31 35 39
    40 51 52 54 56 75
expressions (66)
    on left: 39 40, on right: 11 40
atom (67)
    on left: 41 42 43 44 45 46, on right: 20 71
compound_stmt (68)
    on left: 47 48 49 50, on right: 7
if_stmt (69)
    on left: 51 52, on right: 47
elif_stmts (70)
    on left: 53 54, on right: 52 54
else_stmt (71)
    on left: 55, on right: 53
while_stmt (72)
    on left: 56, on right: 48
for_stmt (73)
    on left: 57, on right: 49
for_atom (74)
    on left: 58 59, on right: 57
block (75)
    on left: 60 61, on right: 51 52 54 55 56 57 64
constant (76)
    on left: 62 63, on right: 42 74
func_def (77)
    on left: 64, on right: 50
args (78)
    on left: 65 66, on right: 64
args_list (79)
    on left: 67 68, on right: 66 68
func_call (80)
    on left: 69, on right: 46
call_list (81)
    on left: 70 71, on right: 71 73 74
call_args (82)
    on left: 72 73 74, on right: 69
return_stmt (83)
    on left: 75 76, on right: 12


state 0

    0 $accept: . S $end
    1 S: . file_input
    2  | . T_eof
    3 file_input: .  [$end]
    4           | . T_newline file_input
    5           | . stmt file_input
    6 stmt: . simple_stmt T_newline
    7     | . compound_stmt T_newline
    8 simple_stmt: . T_break
    9            | . T_continue
   10            | . assign_stmt
   11            | . expressions
   12            | . return_stmt
   13 assign_stmt: . T_name aff expression
   20 arith_exp: . atom
   21          | . arith_exp T_plus arith_exp
   22          | . arith_exp T_minus arith_exp
   23          | . arith_exp T_star arith_exp
   24          | . arith_exp T_divide arith_exp
   25          | . arith_exp T_double_divide arith_exp
   26          | . arith_exp T_double_star arith_exp
   27          | . arith_exp T_mod arith_exp
   28          | . T_minus arith_exp
   29 expression: . expression T_or expression
   30           | . arith_exp T_lt arith_exp
   31           | . expression T_and expression
   32           | . arith_exp T_gt arith_exp
   33           | . arith_exp T_le arith_exp
   34           | . arith_exp T_ge arith_exp
   35           | . T_Lparan expression T_Rparan
   36           | . arith_exp T_deq arith_exp
   37           | . arith_exp T_noteq arith_exp
   38           | . arith_exp
   39 expressions: . expression
   40            | . expression T_comma expressions
   41 atom: . T_name
   42     | . constant
   43     | . T_none
   44     | . T_true
   45     | . T_false
   46     | . func_call
   47 compound_stmt: . if_stmt
   48              | . while_stmt
   49              | . for_stmt
   50              | . func_def
   51 if_stmt: . T_if expression T_colon block
   52        | . T_if expression T_colon block elif_stmts
   56 while_stmt: . T_while expression T_colon block
   57 for_stmt: . T_for T_name T_from for_atom T_to for_atom T_with for_atom T_colon block
   62 constant: . T_number
   63         | . T_string
   64 func_def: . T_def T_name T_Lparan args T_Rparan T_colon block
   69 func_call: . T_name T_Lparan call_args T_Rparan
   75 return_stmt: . T_return expression
   76            | . T_return

    T_name      shift, and go to state 1
    T_number    shift, and go to state 2
    T_string    shift, and go to state 3
    T_newline   shift, and go to state 4
    T_eof       shift, and go to state 5
    T_while     shift, and go to state 6
    T_break     shift, and go to state 7
    T_continue  shift, and go to state 8
    T_return    shift, and go to state 9
    T_Lparan    shift, and go to state 10
    T_if        shift, and go to state 11
    T_for       shift, and go to state 12
    T_minus     shift, and go to state 13
    T_none      shift, and go to state 14
    T_true      shift, and go to state 15
    T_false     shift, and go to state 16
    T_def       shift, and go to state 17

    $default  reduce using rule 3 (file_input)

    S              go to state 18
    file_input     go to state 19
    stmt           go to state 20
    simple_stmt    go to state 21
    assign_stmt    go to state 22
    arith_exp      go to state 23
    expression     go to state 24
    expressions    go to state 25
    atom           go to state 26
    compound_stmt  go to state 27
    if_stmt        go to state 28
    while_stmt     go to state 29
    for_stmt       go to state 30
    constant       go to state 31
    func_def       go to state 32
    func_call      go to state 33
    return_stmt    go to state 34


state 1

   13 assign_stmt: T_name . aff expression
   14 aff: . T_eq
   15    | . T_div_eq
   16    | . T_star_eq
   17    | . T_minus_eq
   18    | . T_plus_eq
   19    | . T_mod_eq
   41 atom: T_name .  [T_newline, T_comma, T_star, T_elif, T_else, T_or, T_and, T_lt, T_gt, T_deq, T_ge, T_le, T_noteq, T_plus, T_minus, T_divide, T_mod, T_double_divide, T_double_star]
   69 func_call: T_name . T_Lparan call_args T_Rparan

    T_eq        shift, and go to state 35
    T_plus_eq   shift, and go to state 36
    T_minus_eq  shift, and go to state 37
    T_star_eq   shift, and go to state 38
    T_div_eq    shift, and go to state 39
    T_mod_eq    shift, and go to state 40
    T_Lparan    shift, and go to state 41

    $default  reduce using rule 41 (atom)

    aff  go to state 42


state 2

   62 constant: T_number .

    $default  reduce using rule 62 (constant)


state 3

   63 constant: T_string .

    $default  reduce using rule 63 (constant)


state 4

    3 file_input: .  [$end, T_Racco]
    4           | . T_newline file_input
    4           | T_newline . file_input
    5           | . stmt file_input
    6 stmt: . simple_stmt T_newline
    7     | . compound_stmt T_newline
    8 simple_stmt: . T_break
    9            | . T_continue
   10            | . assign_stmt
   11            | . expressions
   12            | . return_stmt
   13 assign_stmt: . T_name aff expression
   20 arith_exp: . atom
   21          | . arith_exp T_plus arith_exp
   22          | . arith_exp T_minus arith_exp
   23          | . arith_exp T_star arith_exp
   24          | . arith_exp T_divide arith_exp
   25          | . arith_exp T_double_divide arith_exp
   26          | . arith_exp T_double_star arith_exp
   27          | . arith_exp T_mod arith_exp
   28          | . T_minus arith_exp
   29 expression: . expression T_or expression
   30           | . arith_exp T_lt arith_exp
   31           | . expression T_and expression
   32           | . arith_exp T_gt arith_exp
   33           | . arith_exp T_le arith_exp
   34           | . arith_exp T_ge arith_exp
   35           | . T_Lparan expression T_Rparan
   36           | . arith_exp T_deq arith_exp
   37           | . arith_exp T_noteq arith_exp
   38           | . arith_exp
   39 expressions: . expression
   40            | . expression T_comma expressions
   41 atom: . T_name
   42     | . constant
   43     | . T_none
   44     | . T_true
   45     | . T_false
   46     | . func_call
   47 compound_stmt: . if_stmt
   48              | . while_stmt
   49              | . for_stmt
   50              | . func_def
   51 if_stmt: . T_if expression T_colon block
   52        | . T_if expression T_colon block elif_stmts
   56 while_stmt: . T_while expression T_colon block
   57 for_stmt: . T_for T_name T_from for_atom T_to for_atom T_with for_atom T_colon block
   62 constant: . T_number
   63         | . T_string
   64 func_def: . T_def T_name T_Lparan args T_Rparan T_colon block
   69 func_call: . T_name T_Lparan call_args T_Rparan
   75 return_stmt: . T_return expression
   76            | . T_return

    T_name      shift, and go to state 1
    T_number    shift, and go to state 2
    T_string    shift, and go to state 3
    T_newline   shift, and go to state 4
    T_while     shift, and go to state 6
    T_break     shift, and go to state 7
    T_continue  shift, and go to state 8
    T_return    shift, and go to state 9
    T_Lparan    shift, and go to state 10
    T_if        shift, and go to state 11
    T_for       shift, and go to state 12
    T_minus     shift, and go to state 13
    T_none      shift, and go to state 14
    T_true      shift, and go to state 15
    T_false     shift, and go to state 16
    T_def       shift, and go to state 17

    $default  reduce using rule 3 (file_input)

    file_input     go to state 43
    stmt           go to state 20
    simple_stmt    go to state 21
    assign_stmt    go to state 22
    arith_exp      go to state 23
    expression     go to state 24
    expressions    go to state 25
    atom           go to state 26
    compound_stmt  go to state 27
    if_stmt        go to state 28
    while_stmt     go to state 29
    for_stmt       go to state 30
    constant       go to state 31
    func_def       go to state 32
    func_call      go to state 33
    return_stmt    go to state 34


state 5

    2 S: T_eof .

    $default  reduce using rule 2 (S)


state 6

   20 arith_exp: . atom
   21          | . arith_exp T_plus arith_exp
   22          | . arith_exp T_minus arith_exp
   23          | . arith_exp T_star arith_exp
   24          | . arith_exp T_divide arith_exp
   25          | . arith_exp T_double_divide arith_exp
   26          | . arith_exp T_double_star arith_exp
   27          | . arith_exp T_mod arith_exp
   28          | . T_minus arith_exp
   29 expression: . expression T_or expression
   30           | . arith_exp T_lt arith_exp
   31           | . expression T_and expression
   32           | . arith_exp T_gt arith_exp
   33           | . arith_exp T_le arith_exp
   34           | . arith_exp T_ge arith_exp
   35           | . T_Lparan expression T_Rparan
   36           | . arith_exp T_deq arith_exp
   37           | . arith_exp T_noteq arith_exp
   38           | . arith_exp
   41 atom: . T_name
   42     | . constant
   43     | . T_none
   44     | . T_true
   45     | . T_false
   46     | . func_call
   56 while_stmt: T_while . expression T_colon block
   62 constant: . T_number
   63         | . T_string
   69 func_call: . T_name T_Lparan call_args T_Rparan

    T_name    shift, and go to state 44
    T_number  shift, and go to state 2
    T_string  shift, and go to state 3
    T_Lparan  shift, and go to state 10
    T_minus   shift, and go to state 13
    T_none    shift, and go to state 14
    T_true    shift, and go to state 15
    T_false   shift, and go to state 16

    arith_exp   go to state 23
    expression  go to state 45
    atom        go to state 26
    constant    go to state 31
    func_call   go to state 33


state 7

    8 simple_stmt: T_break .

    $default  reduce using rule 8 (simple_stmt)


state 8

    9 simple_stmt: T_continue .

    $default  reduce using rule 9 (simple_stmt)


state 9

   20 arith_exp: . atom
   21          | . arith_exp T_plus arith_exp
   22          | . arith_exp T_minus arith_exp
   23          | . arith_exp T_star arith_exp
   24          | . arith_exp T_divide arith_exp
   25          | . arith_exp T_double_divide arith_exp
   26          | . arith_exp T_double_star arith_exp
   27          | . arith_exp T_mod arith_exp
   28          | . T_minus arith_exp
   29 expression: . expression T_or expression
   30           | . arith_exp T_lt arith_exp
   31           | . expression T_and expression
   32           | . arith_exp T_gt arith_exp
   33           | . arith_exp T_le arith_exp
   34           | . arith_exp T_ge arith_exp
   35           | . T_Lparan expression T_Rparan
   36           | . arith_exp T_deq arith_exp
   37           | . arith_exp T_noteq arith_exp
   38           | . arith_exp
   41 atom: . T_name
   42     | . constant
   43     | . T_none
   44     | . T_true
   45     | . T_false
   46     | . func_call
   62 constant: . T_number
   63         | . T_string
   69 func_call: . T_name T_Lparan call_args T_Rparan
   75 return_stmt: T_return . expression
   76            | T_return .  [T_newline, T_elif, T_else]

    T_name    shift, and go to state 44
    T_number  shift, and go to state 2
    T_string  shift, and go to state 3
    T_Lparan  shift, and go to state 10
    T_minus   shift, and go to state 13
    T_none    shift, and go to state 14
    T_true    shift, and go to state 15
    T_false   shift, and go to state 16

    $default  reduce using rule 76 (return_stmt)

    arith_exp   go to state 23
    expression  go to state 46
    atom        go to state 26
    constant    go to state 31
    func_call   go to state 33


state 10

   20 arith_exp: . atom
   21          | . arith_exp T_plus arith_exp
   22          | . arith_exp T_minus arith_exp
   23          | . arith_exp T_star arith_exp
   24          | . arith_exp T_divide arith_exp
   25          | . arith_exp T_double_divide arith_exp
   26          | . arith_exp T_double_star arith_exp
   27          | . arith_exp T_mod arith_exp
   28          | . T_minus arith_exp
   29 expression: . expression T_or expression
   30           | . arith_exp T_lt arith_exp
   31           | . expression T_and expression
   32           | . arith_exp T_gt arith_exp
   33           | . arith_exp T_le arith_exp
   34           | . arith_exp T_ge arith_exp
   35           | . T_Lparan expression T_Rparan
   35           | T_Lparan . expression T_Rparan
   36           | . arith_exp T_deq arith_exp
   37           | . arith_exp T_noteq arith_exp
   38           | . arith_exp
   41 atom: . T_name
   42     | . constant
   43     | . T_none
   44     | . T_true
   45     | . T_false
   46     | . func_call
   62 constant: . T_number
   63         | . T_string
   69 func_call: . T_name T_Lparan call_args T_Rparan

    T_name    shift, and go to state 44
    T_number  shift, and go to state 2
    T_string  shift, and go to state 3
    T_Lparan  shift, and go to state 10
    T_minus   shift, and go to state 13
    T_none    shift, and go to state 14
    T_true    shift, and go to state 15
    T_false   shift, and go to state 16

    arith_exp   go to state 23
    expression  go to state 47
    atom        go to state 26
    constant    go to state 31
    func_call   go to state 33


state 11

   20 arith_exp: . atom
   21          | . arith_exp T_plus arith_exp
   22          | . arith_exp T_minus arith_exp
   23          | . arith_exp T_star arith_exp
   24          | . arith_exp T_divide arith_exp
   25          | . arith_exp T_double_divide arith_exp
   26          | . arith_exp T_double_star arith_exp
   27          | . arith_exp T_mod arith_exp
   28          | . T_minus arith_exp
   29 expression: . expression T_or expression
   30           | . arith_exp T_lt arith_exp
   31           | . expression T_and expression
   32           | . arith_exp T_gt arith_exp
   33           | . arith_exp T_le arith_exp
   34           | . arith_exp T_ge arith_exp
   35           | . T_Lparan expression T_Rparan
   36           | . arith_exp T_deq arith_exp
   37           | . arith_exp T_noteq arith_exp
   38           | . arith_exp
   41 atom: . T_name
   42     | . constant
   43     | . T_none
   44     | . T_true
   45     | . T_false
   46     | . func_call
   51 if_stmt: T_if . expression T_colon block
   52        | T_if . expression T_colon block elif_stmts
   62 constant: . T_number
   63         | . T_string
   69 func_call: . T_name T_Lparan call_args T_Rparan

    T_name    shift, and go to state 44
    T_number  shift, and go to state 2
    T_string  shift, and go to state 3
    T_Lparan  shift, and go to state 10
    T_minus   shift, and go to state 13
    T_none    shift, and go to state 14
    T_true    shift, and go to state 15
    T_false   shift, and go to state 16

    arith_exp   go to state 23
    expression  go to state 48
    atom        go to state 26
    constant    go to state 31
    func_call   go to state 33


state 12

   57 for_stmt: T_for . T_name T_from for_atom T_to for_atom T_with for_atom T_colon block

    T_name  shift, and go to state 49


state 13

   20 arith_exp: . atom
   21          | . arith_exp T_plus arith_exp
   22          | . arith_exp T_minus arith_exp
   23          | . arith_exp T_star arith_exp
   24          | . arith_exp T_divide arith_exp
   25          | . arith_exp T_double_divide arith_exp
   26          | . arith_exp T_double_star arith_exp
   27          | . arith_exp T_mod arith_exp
   28          | . T_minus arith_exp
   28          | T_minus . arith_exp
   41 atom: . T_name
   42     | . constant
   43     | . T_none
   44     | . T_true
   45     | . T_false
   46     | . func_call
   62 constant: . T_number
   63         | . T_string
   69 func_call: . T_name T_Lparan call_args T_Rparan

    T_name    shift, and go to state 44
    T_number  shift, and go to state 2
    T_string  shift, and go to state 3
    T_minus   shift, and go to state 13
    T_none    shift, and go to state 14
    T_true    shift, and go to state 15
    T_false   shift, and go to state 16

    arith_exp  go to state 50
    atom       go to state 26
    constant   go to state 31
    func_call  go to state 33


state 14

   43 atom: T_none .

    $default  reduce using rule 43 (atom)


state 15

   44 atom: T_true .

    $default  reduce using rule 44 (atom)


state 16

   45 atom: T_false .

    $default  reduce using rule 45 (atom)


state 17

   64 func_def: T_def . T_name T_Lparan args T_Rparan T_colon block

    T_name  shift, and go to state 51


state 18

    0 $accept: S . $end

    $end  shift, and go to state 52


state 19

    1 S: file_input .

    $default  reduce using rule 1 (S)


state 20

    3 file_input: .  [$end, T_Racco]
    4           | . T_newline file_input
    5           | . stmt file_input
    5           | stmt . file_input
    6 stmt: . simple_stmt T_newline
    7     | . compound_stmt T_newline
    8 simple_stmt: . T_break
    9            | . T_continue
   10            | . assign_stmt
   11            | . expressions
   12            | . return_stmt
   13 assign_stmt: . T_name aff expression
   20 arith_exp: . atom
   21          | . arith_exp T_plus arith_exp
   22          | . arith_exp T_minus arith_exp
   23          | . arith_exp T_star arith_exp
   24          | . arith_exp T_divide arith_exp
   25          | . arith_exp T_double_divide arith_exp
   26          | . arith_exp T_double_star arith_exp
   27          | . arith_exp T_mod arith_exp
   28          | . T_minus arith_exp
   29 expression: . expression T_or expression
   30           | . arith_exp T_lt arith_exp
   31           | . expression T_and expression
   32           | . arith_exp T_gt arith_exp
   33           | . arith_exp T_le arith_exp
   34           | . arith_exp T_ge arith_exp
   35           | . T_Lparan expression T_Rparan
   36           | . arith_exp T_deq arith_exp
   37           | . arith_exp T_noteq arith_exp
   38           | . arith_exp
   39 expressions: . expression
   40            | . expression T_comma expressions
   41 atom: . T_name
   42     | . constant
   43     | . T_none
   44     | . T_true
   45     | . T_false
   46     | . func_call
   47 compound_stmt: . if_stmt
   48              | . while_stmt
   49              | . for_stmt
   50              | . func_def
   51 if_stmt: . T_if expression T_colon block
   52        | . T_if expression T_colon block elif_stmts
   56 while_stmt: . T_while expression T_colon block
   57 for_stmt: . T_for T_name T_from for_atom T_to for_atom T_with for_atom T_colon block
   62 constant: . T_number
   63         | . T_string
   64 func_def: . T_def T_name T_Lparan args T_Rparan T_colon block
   69 func_call: . T_name T_Lparan call_args T_Rparan
   75 return_stmt: . T_return expression
   76            | . T_return

    T_name      shift, and go to state 1
    T_number    shift, and go to state 2
    T_string    shift, and go to state 3
    T_newline   shift, and go to state 4
    T_while     shift, and go to state 6
    T_break     shift, and go to state 7
    T_continue  shift, and go to state 8
    T_return    shift, and go to state 9
    T_Lparan    shift, and go to state 10
    T_if        shift, and go to state 11
    T_for       shift, and go to state 12
    T_minus     shift, and go to state 13
    T_none      shift, and go to state 14
    T_true      shift, and go to state 15
    T_false     shift, and go to state 16
    T_def       shift, and go to state 17

    $default  reduce using rule 3 (file_input)

    file_input     go to state 53
    stmt           go to state 20
    simple_stmt    go to state 21
    assign_stmt    go to state 22
    arith_exp      go to state 23
    expression     go to state 24
    expressions    go to state 25
    atom           go to state 26
    compound_stmt  go to state 27
    if_stmt        go to state 28
    while_stmt     go to state 29
    for_stmt       go to state 30
    constant       go to state 31
    func_def       go to state 32
    func_call      go to state 33
    return_stmt    go to state 34


state 21

    6 stmt: simple_stmt . T_newline

    T_newline  shift, and go to state 54


state 22

   10 simple_stmt: assign_stmt .

    $default  reduce using rule 10 (simple_stmt)


state 23

   21 arith_exp: arith_exp . T_plus arith_exp
   22          | arith_exp . T_minus arith_exp
   23          | arith_exp . T_star arith_exp
   24          | arith_exp . T_divide arith_exp
   25          | arith_exp . T_double_divide arith_exp
   26          | arith_exp . T_double_star arith_exp
   27          | arith_exp . T_mod arith_exp
   30 expression: arith_exp . T_lt arith_exp
   32           | arith_exp . T_gt arith_exp
   33           | arith_exp . T_le arith_exp
   34           | arith_exp . T_ge arith_exp
   36           | arith_exp . T_deq arith_exp
   37           | arith_exp . T_noteq arith_exp
   38           | arith_exp .  [T_newline, T_comma, T_Rparan, T_colon, T_elif, T_else, T_or, T_and]

    T_star           shift, and go to state 55
    T_lt             shift, and go to state 56
    T_gt             shift, and go to state 57
    T_deq            shift, and go to state 58
    T_ge             shift, and go to state 59
    T_le             shift, and go to state 60
    T_noteq          shift, and go to state 61
    T_plus           shift, and go to state 62
    T_minus          shift, and go to state 63
    T_divide         shift, and go to state 64
    T_mod            shift, and go to state 65
    T_double_divide  shift, and go to state 66
    T_double_star    shift, and go to state 67

    $default  reduce using rule 38 (expression)


state 24

   29 expression: expression . T_or expression
   31           | expression . T_and expression
   39 expressions: expression .  [T_newline, T_elif, T_else]
   40            | expression . T_comma expressions

    T_comma  shift, and go to state 68
    T_or     shift, and go to state 69
    T_and    shift, and go to state 70

    $default  reduce using rule 39 (expressions)


state 25

   11 simple_stmt: expressions .

    $default  reduce using rule 11 (simple_stmt)


state 26

   20 arith_exp: atom .

    $default  reduce using rule 20 (arith_exp)


state 27

    7 stmt: compound_stmt . T_newline

    T_newline  shift, and go to state 71


state 28

   47 compound_stmt: if_stmt .

    $default  reduce using rule 47 (compound_stmt)


state 29

   48 compound_stmt: while_stmt .

    $default  reduce using rule 48 (compound_stmt)


state 30

   49 compound_stmt: for_stmt .

    $default  reduce using rule 49 (compound_stmt)


state 31

   42 atom: constant .

    $default  reduce using rule 42 (atom)


state 32

   50 compound_stmt: func_def .

    $default  reduce using rule 50 (compound_stmt)


state 33

   46 atom: func_call .

    $default  reduce using rule 46 (atom)


state 34

   12 simple_stmt: return_stmt .

    $default  reduce using rule 12 (simple_stmt)


state 35

   14 aff: T_eq .

    $default  reduce using rule 14 (aff)


state 36

   18 aff: T_plus_eq .

    $default  reduce using rule 18 (aff)


state 37

   17 aff: T_minus_eq .

    $default  reduce using rule 17 (aff)


state 38

   16 aff: T_star_eq .

    $default  reduce using rule 16 (aff)


state 39

   15 aff: T_div_eq .

    $default  reduce using rule 15 (aff)


state 40

   19 aff: T_mod_eq .

    $default  reduce using rule 19 (aff)


state 41

   62 constant: . T_number
   63         | . T_string
   69 func_call: T_name T_Lparan . call_args T_Rparan
   72 call_args: .  [T_Rparan]
   73          | . T_name call_list
   74          | . constant call_list

    T_name    shift, and go to state 72
    T_number  shift, and go to state 2
    T_string  shift, and go to state 3

    $default  reduce using rule 72 (call_args)

    constant   go to state 73
    call_args  go to state 74


state 42

   13 assign_stmt: T_name aff . expression
   20 arith_exp: . atom
   21          | . arith_exp T_plus arith_exp
   22          | . arith_exp T_minus arith_exp
   23          | . arith_exp T_star arith_exp
   24          | . arith_exp T_divide arith_exp
   25          | . arith_exp T_double_divide arith_exp
   26          | . arith_exp T_double_star arith_exp
   27          | . arith_exp T_mod arith_exp
   28          | . T_minus arith_exp
   29 expression: . expression T_or expression
   30           | . arith_exp T_lt arith_exp
   31           | . expression T_and expression
   32           | . arith_exp T_gt arith_exp
   33           | . arith_exp T_le arith_exp
   34           | . arith_exp T_ge arith_exp
   35           | . T_Lparan expression T_Rparan
   36           | . arith_exp T_deq arith_exp
   37           | . arith_exp T_noteq arith_exp
   38           | . arith_exp
   41 atom: . T_name
   42     | . constant
   43     | . T_none
   44     | . T_true
   45     | . T_false
   46     | . func_call
   62 constant: . T_number
   63         | . T_string
   69 func_call: . T_name T_Lparan call_args T_Rparan

    T_name    shift, and go to state 44
    T_number  shift, and go to state 2
    T_string  shift, and go to state 3
    T_Lparan  shift, and go to state 10
    T_minus   shift, and go to state 13
    T_none    shift, and go to state 14
    T_true    shift, and go to state 15
    T_false   shift, and go to state 16

    arith_exp   go to state 23
    expression  go to state 75
    atom        go to state 26
    constant    go to state 31
    func_call   go to state 33


state 43

    4 file_input: T_newline file_input .

    $default  reduce using rule 4 (file_input)


state 44

   41 atom: T_name .  [T_newline, T_comma, T_star, T_Rparan, T_colon, T_elif, T_else, T_or, T_and, T_lt, T_gt, T_deq, T_ge, T_le, T_noteq, T_plus, T_minus, T_divide, T_mod, T_double_divide, T_double_star]
   69 func_call: T_name . T_Lparan call_args T_Rparan

    T_Lparan  shift, and go to state 41

    $default  reduce using rule 41 (atom)


state 45

   29 expression: expression . T_or expression
   31           | expression . T_and expression
   56 while_stmt: T_while expression . T_colon block

    T_colon  shift, and go to state 76
    T_or     shift, and go to state 69
    T_and    shift, and go to state 70


state 46

   29 expression: expression . T_or expression
   31           | expression . T_and expression
   75 return_stmt: T_return expression .  [T_newline, T_elif, T_else]

    T_or   shift, and go to state 69
    T_and  shift, and go to state 70

    $default  reduce using rule 75 (return_stmt)


state 47

   29 expression: expression . T_or expression
   31           | expression . T_and expression
   35           | T_Lparan expression . T_Rparan

    T_Rparan  shift, and go to state 77
    T_or      shift, and go to state 69
    T_and     shift, and go to state 70


state 48

   29 expression: expression . T_or expression
   31           | expression . T_and expression
   51 if_stmt: T_if expression . T_colon block
   52        | T_if expression . T_colon block elif_stmts

    T_colon  shift, and go to state 78
    T_or     shift, and go to state 69
    T_and    shift, and go to state 70


state 49

   57 for_stmt: T_for T_name . T_from for_atom T_to for_atom T_with for_atom T_colon block

    T_from  shift, and go to state 79


state 50

   21 arith_exp: arith_exp . T_plus arith_exp
   22          | arith_exp . T_minus arith_exp
   23          | arith_exp . T_star arith_exp
   24          | arith_exp . T_divide arith_exp
   25          | arith_exp . T_double_divide arith_exp
   26          | arith_exp . T_double_star arith_exp
   27          | arith_exp . T_mod arith_exp
   28          | T_minus arith_exp .  [T_newline, T_comma, T_Rparan, T_colon, T_elif, T_else, T_or, T_and, T_lt, T_gt, T_deq, T_ge, T_le, T_noteq, T_plus, T_minus]

    T_star           shift, and go to state 55
    T_divide         shift, and go to state 64
    T_mod            shift, and go to state 65
    T_double_divide  shift, and go to state 66
    T_double_star    shift, and go to state 67

    $default  reduce using rule 28 (arith_exp)

    Conflict between rule 28 and token T_star resolved as shift (T_minus < T_star).
    Conflict between rule 28 and token T_plus resolved as reduce (%left T_plus).
    Conflict between rule 28 and token T_minus resolved as reduce (%left T_minus).
    Conflict between rule 28 and token T_divide resolved as shift (T_minus < T_divide).
    Conflict between rule 28 and token T_mod resolved as shift (T_minus < T_mod).
    Conflict between rule 28 and token T_double_divide resolved as shift (T_minus < T_double_divide).
    Conflict between rule 28 and token T_double_star resolved as shift (T_minus < T_double_star).


state 51

   64 func_def: T_def T_name . T_Lparan args T_Rparan T_colon block

    T_Lparan  shift, and go to state 80


state 52

    0 $accept: S $end .

    $default  accept


state 53

    5 file_input: stmt file_input .

    $default  reduce using rule 5 (file_input)


state 54

    6 stmt: simple_stmt T_newline .

    $default  reduce using rule 6 (stmt)


state 55

   20 arith_exp: . atom
   21          | . arith_exp T_plus arith_exp
   22          | . arith_exp T_minus arith_exp
   23          | . arith_exp T_star arith_exp
   23          | arith_exp T_star . arith_exp
   24          | . arith_exp T_divide arith_exp
   25          | . arith_exp T_double_divide arith_exp
   26          | . arith_exp T_double_star arith_exp
   27          | . arith_exp T_mod arith_exp
   28          | . T_minus arith_exp
   41 atom: . T_name
   42     | . constant
   43     | . T_none
   44     | . T_true
   45     | . T_false
   46     | . func_call
   62 constant: . T_number
   63         | . T_string
   69 func_call: . T_name T_Lparan call_args T_Rparan

    T_name    shift, and go to state 44
    T_number  shift, and go to state 2
    T_string  shift, and go to state 3
    T_minus   shift, and go to state 13
    T_none    shift, and go to state 14
    T_true    shift, and go to state 15
    T_false   shift, and go to state 16

    arith_exp  go to state 81
    atom       go to state 26
    constant   go to state 31
    func_call  go to state 33


state 56

   20 arith_exp: . atom
   21          | . arith_exp T_plus arith_exp
   22          | . arith_exp T_minus arith_exp
   23          | . arith_exp T_star arith_exp
   24          | . arith_exp T_divide arith_exp
   25          | . arith_exp T_double_divide arith_exp
   26          | . arith_exp T_double_star arith_exp
   27          | . arith_exp T_mod arith_exp
   28          | . T_minus arith_exp
   30 expression: arith_exp T_lt . arith_exp
   41 atom: . T_name
   42     | . constant
   43     | . T_none
   44     | . T_true
   45     | . T_false
   46     | . func_call
   62 constant: . T_number
   63         | . T_string
   69 func_call: . T_name T_Lparan call_args T_Rparan

    T_name    shift, and go to state 44
    T_number  shift, and go to state 2
    T_string  shift, and go to state 3
    T_minus   shift, and go to state 13
    T_none    shift, and go to state 14
    T_true    shift, and go to state 15
    T_false   shift, and go to state 16

    arith_exp  go to state 82
    atom       go to state 26
    constant   go to state 31
    func_call  go to state 33


state 57

   20 arith_exp: . atom
   21          | . arith_exp T_plus arith_exp
   22          | . arith_exp T_minus arith_exp
   23          | . arith_exp T_star arith_exp
   24          | . arith_exp T_divide arith_exp
   25          | . arith_exp T_double_divide arith_exp
   26          | . arith_exp T_double_star arith_exp
   27          | . arith_exp T_mod arith_exp
   28          | . T_minus arith_exp
   32 expression: arith_exp T_gt . arith_exp
   41 atom: . T_name
   42     | . constant
   43     | . T_none
   44     | . T_true
   45     | . T_false
   46     | . func_call
   62 constant: . T_number
   63         | . T_string
   69 func_call: . T_name T_Lparan call_args T_Rparan

    T_name    shift, and go to state 44
    T_number  shift, and go to state 2
    T_string  shift, and go to state 3
    T_minus   shift, and go to state 13
    T_none    shift, and go to state 14
    T_true    shift, and go to state 15
    T_false   shift, and go to state 16

    arith_exp  go to state 83
    atom       go to state 26
    constant   go to state 31
    func_call  go to state 33


state 58

   20 arith_exp: . atom
   21          | . arith_exp T_plus arith_exp
   22          | . arith_exp T_minus arith_exp
   23          | . arith_exp T_star arith_exp
   24          | . arith_exp T_divide arith_exp
   25          | . arith_exp T_double_divide arith_exp
   26          | . arith_exp T_double_star arith_exp
   27          | . arith_exp T_mod arith_exp
   28          | . T_minus arith_exp
   36 expression: arith_exp T_deq . arith_exp
   41 atom: . T_name
   42     | . constant
   43     | . T_none
   44     | . T_true
   45     | . T_false
   46     | . func_call
   62 constant: . T_number
   63         | . T_string
   69 func_call: . T_name T_Lparan call_args T_Rparan

    T_name    shift, and go to state 44
    T_number  shift, and go to state 2
    T_string  shift, and go to state 3
    T_minus   shift, and go to state 13
    T_none    shift, and go to state 14
    T_true    shift, and go to state 15
    T_false   shift, and go to state 16

    arith_exp  go to state 84
    atom       go to state 26
    constant   go to state 31
    func_call  go to state 33


state 59

   20 arith_exp: . atom
   21          | . arith_exp T_plus arith_exp
   22          | . arith_exp T_minus arith_exp
   23          | . arith_exp T_star arith_exp
   24          | . arith_exp T_divide arith_exp
   25          | . arith_exp T_double_divide arith_exp
   26          | . arith_exp T_double_star arith_exp
   27          | . arith_exp T_mod arith_exp
   28          | . T_minus arith_exp
   34 expression: arith_exp T_ge . arith_exp
   41 atom: . T_name
   42     | . constant
   43     | . T_none
   44     | . T_true
   45     | . T_false
   46     | . func_call
   62 constant: . T_number
   63         | . T_string
   69 func_call: . T_name T_Lparan call_args T_Rparan

    T_name    shift, and go to state 44
    T_number  shift, and go to state 2
    T_string  shift, and go to state 3
    T_minus   shift, and go to state 13
    T_none    shift, and go to state 14
    T_true    shift, and go to state 15
    T_false   shift, and go to state 16

    arith_exp  go to state 85
    atom       go to state 26
    constant   go to state 31
    func_call  go to state 33


state 60

   20 arith_exp: . atom
   21          | . arith_exp T_plus arith_exp
   22          | . arith_exp T_minus arith_exp
   23          | . arith_exp T_star arith_exp
   24          | . arith_exp T_divide arith_exp
   25          | . arith_exp T_double_divide arith_exp
   26          | . arith_exp T_double_star arith_exp
   27          | . arith_exp T_mod arith_exp
   28          | . T_minus arith_exp
   33 expression: arith_exp T_le . arith_exp
   41 atom: . T_name
   42     | . constant
   43     | . T_none
   44     | . T_true
   45     | . T_false
   46     | . func_call
   62 constant: . T_number
   63         | . T_string
   69 func_call: . T_name T_Lparan call_args T_Rparan

    T_name    shift, and go to state 44
    T_number  shift, and go to state 2
    T_string  shift, and go to state 3
    T_minus   shift, and go to state 13
    T_none    shift, and go to state 14
    T_true    shift, and go to state 15
    T_false   shift, and go to state 16

    arith_exp  go to state 86
    atom       go to state 26
    constant   go to state 31
    func_call  go to state 33


state 61

   20 arith_exp: . atom
   21          | . arith_exp T_plus arith_exp
   22          | . arith_exp T_minus arith_exp
   23          | . arith_exp T_star arith_exp
   24          | . arith_exp T_divide arith_exp
   25          | . arith_exp T_double_divide arith_exp
   26          | . arith_exp T_double_star arith_exp
   27          | . arith_exp T_mod arith_exp
   28          | . T_minus arith_exp
   37 expression: arith_exp T_noteq . arith_exp
   41 atom: . T_name
   42     | . constant
   43     | . T_none
   44     | . T_true
   45     | . T_false
   46     | . func_call
   62 constant: . T_number
   63         | . T_string
   69 func_call: . T_name T_Lparan call_args T_Rparan

    T_name    shift, and go to state 44
    T_number  shift, and go to state 2
    T_string  shift, and go to state 3
    T_minus   shift, and go to state 13
    T_none    shift, and go to state 14
    T_true    shift, and go to state 15
    T_false   shift, and go to state 16

    arith_exp  go to state 87
    atom       go to state 26
    constant   go to state 31
    func_call  go to state 33


state 62

   20 arith_exp: . atom
   21          | . arith_exp T_plus arith_exp
   21          | arith_exp T_plus . arith_exp
   22          | . arith_exp T_minus arith_exp
   23          | . arith_exp T_star arith_exp
   24          | . arith_exp T_divide arith_exp
   25          | . arith_exp T_double_divide arith_exp
   26          | . arith_exp T_double_star arith_exp
   27          | . arith_exp T_mod arith_exp
   28          | . T_minus arith_exp
   41 atom: . T_name
   42     | . constant
   43     | . T_none
   44     | . T_true
   45     | . T_false
   46     | . func_call
   62 constant: . T_number
   63         | . T_string
   69 func_call: . T_name T_Lparan call_args T_Rparan

    T_name    shift, and go to state 44
    T_number  shift, and go to state 2
    T_string  shift, and go to state 3
    T_minus   shift, and go to state 13
    T_none    shift, and go to state 14
    T_true    shift, and go to state 15
    T_false   shift, and go to state 16

    arith_exp  go to state 88
    atom       go to state 26
    constant   go to state 31
    func_call  go to state 33


state 63

   20 arith_exp: . atom
   21          | . arith_exp T_plus arith_exp
   22          | . arith_exp T_minus arith_exp
   22          | arith_exp T_minus . arith_exp
   23          | . arith_exp T_star arith_exp
   24          | . arith_exp T_divide arith_exp
   25          | . arith_exp T_double_divide arith_exp
   26          | . arith_exp T_double_star arith_exp
   27          | . arith_exp T_mod arith_exp
   28          | . T_minus arith_exp
   41 atom: . T_name
   42     | . constant
   43     | . T_none
   44     | . T_true
   45     | . T_false
   46     | . func_call
   62 constant: . T_number
   63         | . T_string
   69 func_call: . T_name T_Lparan call_args T_Rparan

    T_name    shift, and go to state 44
    T_number  shift, and go to state 2
    T_string  shift, and go to state 3
    T_minus   shift, and go to state 13
    T_none    shift, and go to state 14
    T_true    shift, and go to state 15
    T_false   shift, and go to state 16

    arith_exp  go to state 89
    atom       go to state 26
    constant   go to state 31
    func_call  go to state 33


state 64

   20 arith_exp: . atom
   21          | . arith_exp T_plus arith_exp
   22          | . arith_exp T_minus arith_exp
   23          | . arith_exp T_star arith_exp
   24          | . arith_exp T_divide arith_exp
   24          | arith_exp T_divide . arith_exp
   25          | . arith_exp T_double_divide arith_exp
   26          | . arith_exp T_double_star arith_exp
   27          | . arith_exp T_mod arith_exp
   28          | . T_minus arith_exp
   41 atom: . T_name
   42     | . constant
   43     | . T_none
   44     | . T_true
   45     | . T_false
   46     | . func_call
   62 constant: . T_number
   63         | . T_string
   69 func_call: . T_name T_Lparan call_args T_Rparan

    T_name    shift, and go to state 44
    T_number  shift, and go to state 2
    T_string  shift, and go to state 3
    T_minus   shift, and go to state 13
    T_none    shift, and go to state 14
    T_true    shift, and go to state 15
    T_false   shift, and go to state 16

    arith_exp  go to state 90
    atom       go to state 26
    constant   go to state 31
    func_call  go to state 33


state 65

   20 arith_exp: . atom
   21          | . arith_exp T_plus arith_exp
   22          | . arith_exp T_minus arith_exp
   23          | . arith_exp T_star arith_exp
   24          | . arith_exp T_divide arith_exp
   25          | . arith_exp T_double_divide arith_exp
   26          | . arith_exp T_double_star arith_exp
   27          | . arith_exp T_mod arith_exp
   27          | arith_exp T_mod . arith_exp
   28          | . T_minus arith_exp
   41 atom: . T_name
   42     | . constant
   43     | . T_none
   44     | . T_true
   45     | . T_false
   46     | . func_call
   62 constant: . T_number
   63         | . T_string
   69 func_call: . T_name T_Lparan call_args T_Rparan

    T_name    shift, and go to state 44
    T_number  shift, and go to state 2
    T_string  shift, and go to state 3
    T_minus   shift, and go to state 13
    T_none    shift, and go to state 14
    T_true    shift, and go to state 15
    T_false   shift, and go to state 16

    arith_exp  go to state 91
    atom       go to state 26
    constant   go to state 31
    func_call  go to state 33


state 66

   20 arith_exp: . atom
   21          | . arith_exp T_plus arith_exp
   22          | . arith_exp T_minus arith_exp
   23          | . arith_exp T_star arith_exp
   24          | . arith_exp T_divide arith_exp
   25          | . arith_exp T_double_divide arith_exp
   25          | arith_exp T_double_divide . arith_exp
   26          | . arith_exp T_double_star arith_exp
   27          | . arith_exp T_mod arith_exp
   28          | . T_minus arith_exp
   41 atom: . T_name
   42     | . constant
   43     | . T_none
   44     | . T_true
   45     | . T_false
   46     | . func_call
   62 constant: . T_number
   63         | . T_string
   69 func_call: . T_name T_Lparan call_args T_Rparan

    T_name    shift, and go to state 44
    T_number  shift, and go to state 2
    T_string  shift, and go to state 3
    T_minus   shift, and go to state 13
    T_none    shift, and go to state 14
    T_true    shift, and go to state 15
    T_false   shift, and go to state 16

    arith_exp  go to state 92
    atom       go to state 26
    constant   go to state 31
    func_call  go to state 33


state 67

   20 arith_exp: . atom
   21          | . arith_exp T_plus arith_exp
   22          | . arith_exp T_minus arith_exp
   23          | . arith_exp T_star arith_exp
   24          | . arith_exp T_divide arith_exp
   25          | . arith_exp T_double_divide arith_exp
   26          | . arith_exp T_double_star arith_exp
   26          | arith_exp T_double_star . arith_exp
   27          | . arith_exp T_mod arith_exp
   28          | . T_minus arith_exp
   41 atom: . T_name
   42     | . constant
   43     | . T_none
   44     | . T_true
   45     | . T_false
   46     | . func_call
   62 constant: . T_number
   63         | . T_string
   69 func_call: . T_name T_Lparan call_args T_Rparan

    T_name    shift, and go to state 44
    T_number  shift, and go to state 2
    T_string  shift, and go to state 3
    T_minus   shift, and go to state 13
    T_none    shift, and go to state 14
    T_true    shift, and go to state 15
    T_false   shift, and go to state 16

    arith_exp  go to state 93
    atom       go to state 26
    constant   go to state 31
    func_call  go to state 33


state 68

   20 arith_exp: . atom
   21          | . arith_exp T_plus arith_exp
   22          | . arith_exp T_minus arith_exp
   23          | . arith_exp T_star arith_exp
   24          | . arith_exp T_divide arith_exp
   25          | . arith_exp T_double_divide arith_exp
   26          | . arith_exp T_double_star arith_exp
   27          | . arith_exp T_mod arith_exp
   28          | . T_minus arith_exp
   29 expression: . expression T_or expression
   30           | . arith_exp T_lt arith_exp
   31           | . expression T_and expression
   32           | . arith_exp T_gt arith_exp
   33           | . arith_exp T_le arith_exp
   34           | . arith_exp T_ge arith_exp
   35           | . T_Lparan expression T_Rparan
   36           | . arith_exp T_deq arith_exp
   37           | . arith_exp T_noteq arith_exp
   38           | . arith_exp
   39 expressions: . expression
   40            | . expression T_comma expressions
   40            | expression T_comma . expressions
   41 atom: . T_name
   42     | . constant
   43     | . T_none
   44     | . T_true
   45     | . T_false
   46     | . func_call
   62 constant: . T_number
   63         | . T_string
   69 func_call: . T_name T_Lparan call_args T_Rparan

    T_name    shift, and go to state 44
    T_number  shift, and go to state 2
    T_string  shift, and go to state 3
    T_Lparan  shift, and go to state 10
    T_minus   shift, and go to state 13
    T_none    shift, and go to state 14
    T_true    shift, and go to state 15
    T_false   shift, and go to state 16

    arith_exp    go to state 23
    expression   go to state 24
    expressions  go to state 94
    atom         go to state 26
    constant     go to state 31
    func_call    go to state 33


state 69

   20 arith_exp: . atom
   21          | . arith_exp T_plus arith_exp
   22          | . arith_exp T_minus arith_exp
   23          | . arith_exp T_star arith_exp
   24          | . arith_exp T_divide arith_exp
   25          | . arith_exp T_double_divide arith_exp
   26          | . arith_exp T_double_star arith_exp
   27          | . arith_exp T_mod arith_exp
   28          | . T_minus arith_exp
   29 expression: . expression T_or expression
   29           | expression T_or . expression
   30           | . arith_exp T_lt arith_exp
   31           | . expression T_and expression
   32           | . arith_exp T_gt arith_exp
   33           | . arith_exp T_le arith_exp
   34           | . arith_exp T_ge arith_exp
   35           | . T_Lparan expression T_Rparan
   36           | . arith_exp T_deq arith_exp
   37           | . arith_exp T_noteq arith_exp
   38           | . arith_exp
   41 atom: . T_name
   42     | . constant
   43     | . T_none
   44     | . T_true
   45     | . T_false
   46     | . func_call
   62 constant: . T_number
   63         | . T_string
   69 func_call: . T_name T_Lparan call_args T_Rparan

    T_name    shift, and go to state 44
    T_number  shift, and go to state 2
    T_string  shift, and go to state 3
    T_Lparan  shift, and go to state 10
    T_minus   shift, and go to state 13
    T_none    shift, and go to state 14
    T_true    shift, and go to state 15
    T_false   shift, and go to state 16

    arith_exp   go to state 23
    expression  go to state 95
    atom        go to state 26
    constant    go to state 31
    func_call   go to state 33


state 70

   20 arith_exp: . atom
   21          | . arith_exp T_plus arith_exp
   22          | . arith_exp T_minus arith_exp
   23          | . arith_exp T_star arith_exp
   24          | . arith_exp T_divide arith_exp
   25          | . arith_exp T_double_divide arith_exp
   26          | . arith_exp T_double_star arith_exp
   27          | . arith_exp T_mod arith_exp
   28          | . T_minus arith_exp
   29 expression: . expression T_or expression
   30           | . arith_exp T_lt arith_exp
   31           | . expression T_and expression
   31           | expression T_and . expression
   32           | . arith_exp T_gt arith_exp
   33           | . arith_exp T_le arith_exp
   34           | . arith_exp T_ge arith_exp
   35           | . T_Lparan expression T_Rparan
   36           | . arith_exp T_deq arith_exp
   37           | . arith_exp T_noteq arith_exp
   38           | . arith_exp
   41 atom: . T_name
   42     | . constant
   43     | . T_none
   44     | . T_true
   45     | . T_false
   46     | . func_call
   62 constant: . T_number
   63         | . T_string
   69 func_call: . T_name T_Lparan call_args T_Rparan

    T_name    shift, and go to state 44
    T_number  shift, and go to state 2
    T_string  shift, and go to state 3
    T_Lparan  shift, and go to state 10
    T_minus   shift, and go to state 13
    T_none    shift, and go to state 14
    T_true    shift, and go to state 15
    T_false   shift, and go to state 16

    arith_exp   go to state 23
    expression  go to state 96
    atom        go to state 26
    constant    go to state 31
    func_call   go to state 33


state 71

    7 stmt: compound_stmt T_newline .

    $default  reduce using rule 7 (stmt)


state 72

   70 call_list: .  [T_Rparan]
   71          | . T_comma atom call_list
   73 call_args: T_name . call_list

    T_comma  shift, and go to state 97

    $default  reduce using rule 70 (call_list)

    call_list  go to state 98


state 73

   70 call_list: .  [T_Rparan]
   71          | . T_comma atom call_list
   74 call_args: constant . call_list

    T_comma  shift, and go to state 97

    $default  reduce using rule 70 (call_list)

    call_list  go to state 99


state 74

   69 func_call: T_name T_Lparan call_args . T_Rparan

    T_Rparan  shift, and go to state 100


state 75

   13 assign_stmt: T_name aff expression .  [T_newline, T_elif, T_else]
   29 expression: expression . T_or expression
   31           | expression . T_and expression

    T_or   shift, and go to state 69
    T_and  shift, and go to state 70

    $default  reduce using rule 13 (assign_stmt)


state 76

    8 simple_stmt: . T_break
    9            | . T_continue
   10            | . assign_stmt
   11            | . expressions
   12            | . return_stmt
   13 assign_stmt: . T_name aff expression
   20 arith_exp: . atom
   21          | . arith_exp T_plus arith_exp
   22          | . arith_exp T_minus arith_exp
   23          | . arith_exp T_star arith_exp
   24          | . arith_exp T_divide arith_exp
   25          | . arith_exp T_double_divide arith_exp
   26          | . arith_exp T_double_star arith_exp
   27          | . arith_exp T_mod arith_exp
   28          | . T_minus arith_exp
   29 expression: . expression T_or expression
   30           | . arith_exp T_lt arith_exp
   31           | . expression T_and expression
   32           | . arith_exp T_gt arith_exp
   33           | . arith_exp T_le arith_exp
   34           | . arith_exp T_ge arith_exp
   35           | . T_Lparan expression T_Rparan
   36           | . arith_exp T_deq arith_exp
   37           | . arith_exp T_noteq arith_exp
   38           | . arith_exp
   39 expressions: . expression
   40            | . expression T_comma expressions
   41 atom: . T_name
   42     | . constant
   43     | . T_none
   44     | . T_true
   45     | . T_false
   46     | . func_call
   56 while_stmt: T_while expression T_colon . block
   60 block: . simple_stmt
   61      | . T_Lacco file_input T_Racco
   62 constant: . T_number
   63         | . T_string
   69 func_call: . T_name T_Lparan call_args T_Rparan
   75 return_stmt: . T_return expression
   76            | . T_return

    T_name      shift, and go to state 1
    T_number    shift, and go to state 2
    T_string    shift, and go to state 3
    T_Lacco     shift, and go to state 101
    T_break     shift, and go to state 7
    T_continue  shift, and go to state 8
    T_return    shift, and go to state 9
    T_Lparan    shift, and go to state 10
    T_minus     shift, and go to state 13
    T_none      shift, and go to state 14
    T_true      shift, and go to state 15
    T_false     shift, and go to state 16

    simple_stmt  go to state 102
    assign_stmt  go to state 22
    arith_exp    go to state 23
    expression   go to state 24
    expressions  go to state 25
    atom         go to state 26
    block        go to state 103
    constant     go to state 31
    func_call    go to state 33
    return_stmt  go to state 34


state 77

   35 expression: T_Lparan expression T_Rparan .

    $default  reduce using rule 35 (expression)


state 78

    8 simple_stmt: . T_break
    9            | . T_continue
   10            | . assign_stmt
   11            | . expressions
   12            | . return_stmt
   13 assign_stmt: . T_name aff expression
   20 arith_exp: . atom
   21          | . arith_exp T_plus arith_exp
   22          | . arith_exp T_minus arith_exp
   23          | . arith_exp T_star arith_exp
   24          | . arith_exp T_divide arith_exp
   25          | . arith_exp T_double_divide arith_exp
   26          | . arith_exp T_double_star arith_exp
   27          | . arith_exp T_mod arith_exp
   28          | . T_minus arith_exp
   29 expression: . expression T_or expression
   30           | . arith_exp T_lt arith_exp
   31           | . expression T_and expression
   32           | . arith_exp T_gt arith_exp
   33           | . arith_exp T_le arith_exp
   34           | . arith_exp T_ge arith_exp
   35           | . T_Lparan expression T_Rparan
   36           | . arith_exp T_deq arith_exp
   37           | . arith_exp T_noteq arith_exp
   38           | . arith_exp
   39 expressions: . expression
   40            | . expression T_comma expressions
   41 atom: . T_name
   42     | . constant
   43     | . T_none
   44     | . T_true
   45     | . T_false
   46     | . func_call
   51 if_stmt: T_if expression T_colon . block
   52        | T_if expression T_colon . block elif_stmts
   60 block: . simple_stmt
   61      | . T_Lacco file_input T_Racco
   62 constant: . T_number
   63         | . T_string
   69 func_call: . T_name T_Lparan call_args T_Rparan
   75 return_stmt: . T_return expression
   76            | . T_return

    T_name      shift, and go to state 1
    T_number    shift, and go to state 2
    T_string    shift, and go to state 3
    T_Lacco     shift, and go to state 101
    T_break     shift, and go to state 7
    T_continue  shift, and go to state 8
    T_return    shift, and go to state 9
    T_Lparan    shift, and go to state 10
    T_minus     shift, and go to state 13
    T_none      shift, and go to state 14
    T_true      shift, and go to state 15
    T_false     shift, and go to state 16

    simple_stmt  go to state 102
    assign_stmt  go to state 22
    arith_exp    go to state 23
    expression   go to state 24
    expressions  go to state 25
    atom         go to state 26
    block        go to state 104
    constant     go to state 31
    func_call    go to state 33
    return_stmt  go to state 34


state 79

   57 for_stmt: T_for T_name T_from . for_atom T_to for_atom T_with for_atom T_colon block
   58 for_atom: . T_name
   59         | . T_number

    T_name    shift, and go to state 105
    T_number  shift, and go to state 106

    for_atom  go to state 107


state 80

   64 func_def: T_def T_name T_Lparan . args T_Rparan T_colon block
   65 args: .  [T_Rparan]
   66     | . T_name args_list

    T_name  shift, and go to state 108

    $default  reduce using rule 65 (args)

    args  go to state 109


state 81

   21 arith_exp: arith_exp . T_plus arith_exp
   22          | arith_exp . T_minus arith_exp
   23          | arith_exp . T_star arith_exp  [T_newline, T_comma, T_star, T_Rparan, T_colon, T_elif, T_else, T_or, T_and, T_lt, T_gt, T_deq, T_ge, T_le, T_noteq, T_plus, T_minus, T_divide, T_mod, T_double_divide]
   23          | arith_exp T_star arith_exp .  [T_newline, T_comma, T_star, T_Rparan, T_colon, T_elif, T_else, T_or, T_and, T_lt, T_gt, T_deq, T_ge, T_le, T_noteq, T_plus, T_minus, T_divide, T_mod, T_double_divide]
   24          | arith_exp . T_divide arith_exp
   25          | arith_exp . T_double_divide arith_exp
   26          | arith_exp . T_double_star arith_exp
   27          | arith_exp . T_mod arith_exp

    T_double_star  shift, and go to state 67

    $default  reduce using rule 23 (arith_exp)

    Conflict between rule 23 and token T_star resolved as reduce (%left T_star).
    Conflict between rule 23 and token T_plus resolved as reduce (T_plus < T_star).
    Conflict between rule 23 and token T_minus resolved as reduce (T_minus < T_star).
    Conflict between rule 23 and token T_divide resolved as reduce (%left T_divide).
    Conflict between rule 23 and token T_mod resolved as reduce (%left T_mod).
    Conflict between rule 23 and token T_double_divide resolved as reduce (%left T_double_divide).
    Conflict between rule 23 and token T_double_star resolved as shift (T_star < T_double_star).


state 82

   21 arith_exp: arith_exp . T_plus arith_exp
   22          | arith_exp . T_minus arith_exp
   23          | arith_exp . T_star arith_exp
   24          | arith_exp . T_divide arith_exp
   25          | arith_exp . T_double_divide arith_exp
   26          | arith_exp . T_double_star arith_exp
   27          | arith_exp . T_mod arith_exp
   30 expression: arith_exp T_lt arith_exp .  [T_newline, T_comma, T_Rparan, T_colon, T_elif, T_else, T_or, T_and]

    T_star           shift, and go to state 55
    T_plus           shift, and go to state 62
    T_minus          shift, and go to state 63
    T_divide         shift, and go to state 64
    T_mod            shift, and go to state 65
    T_double_divide  shift, and go to state 66
    T_double_star    shift, and go to state 67

    $default  reduce using rule 30 (expression)


state 83

   21 arith_exp: arith_exp . T_plus arith_exp
   22          | arith_exp . T_minus arith_exp
   23          | arith_exp . T_star arith_exp
   24          | arith_exp . T_divide arith_exp
   25          | arith_exp . T_double_divide arith_exp
   26          | arith_exp . T_double_star arith_exp
   27          | arith_exp . T_mod arith_exp
   32 expression: arith_exp T_gt arith_exp .  [T_newline, T_comma, T_Rparan, T_colon, T_elif, T_else, T_or, T_and]

    T_star           shift, and go to state 55
    T_plus           shift, and go to state 62
    T_minus          shift, and go to state 63
    T_divide         shift, and go to state 64
    T_mod            shift, and go to state 65
    T_double_divide  shift, and go to state 66
    T_double_star    shift, and go to state 67

    $default  reduce using rule 32 (expression)


state 84

   21 arith_exp: arith_exp . T_plus arith_exp
   22          | arith_exp . T_minus arith_exp
   23          | arith_exp . T_star arith_exp
   24          | arith_exp . T_divide arith_exp
   25          | arith_exp . T_double_divide arith_exp
   26          | arith_exp . T_double_star arith_exp
   27          | arith_exp . T_mod arith_exp
   36 expression: arith_exp T_deq arith_exp .  [T_newline, T_comma, T_Rparan, T_colon, T_elif, T_else, T_or, T_and]

    T_star           shift, and go to state 55
    T_plus           shift, and go to state 62
    T_minus          shift, and go to state 63
    T_divide         shift, and go to state 64
    T_mod            shift, and go to state 65
    T_double_divide  shift, and go to state 66
    T_double_star    shift, and go to state 67

    $default  reduce using rule 36 (expression)


state 85

   21 arith_exp: arith_exp . T_plus arith_exp
   22          | arith_exp . T_minus arith_exp
   23          | arith_exp . T_star arith_exp
   24          | arith_exp . T_divide arith_exp
   25          | arith_exp . T_double_divide arith_exp
   26          | arith_exp . T_double_star arith_exp
   27          | arith_exp . T_mod arith_exp
   34 expression: arith_exp T_ge arith_exp .  [T_newline, T_comma, T_Rparan, T_colon, T_elif, T_else, T_or, T_and]

    T_star           shift, and go to state 55
    T_plus           shift, and go to state 62
    T_minus          shift, and go to state 63
    T_divide         shift, and go to state 64
    T_mod            shift, and go to state 65
    T_double_divide  shift, and go to state 66
    T_double_star    shift, and go to state 67

    $default  reduce using rule 34 (expression)


state 86

   21 arith_exp: arith_exp . T_plus arith_exp
   22          | arith_exp . T_minus arith_exp
   23          | arith_exp . T_star arith_exp
   24          | arith_exp . T_divide arith_exp
   25          | arith_exp . T_double_divide arith_exp
   26          | arith_exp . T_double_star arith_exp
   27          | arith_exp . T_mod arith_exp
   33 expression: arith_exp T_le arith_exp .  [T_newline, T_comma, T_Rparan, T_colon, T_elif, T_else, T_or, T_and]

    T_star           shift, and go to state 55
    T_plus           shift, and go to state 62
    T_minus          shift, and go to state 63
    T_divide         shift, and go to state 64
    T_mod            shift, and go to state 65
    T_double_divide  shift, and go to state 66
    T_double_star    shift, and go to state 67

    $default  reduce using rule 33 (expression)


state 87

   21 arith_exp: arith_exp . T_plus arith_exp
   22          | arith_exp . T_minus arith_exp
   23          | arith_exp . T_star arith_exp
   24          | arith_exp . T_divide arith_exp
   25          | arith_exp . T_double_divide arith_exp
   26          | arith_exp . T_double_star arith_exp
   27          | arith_exp . T_mod arith_exp
   37 expression: arith_exp T_noteq arith_exp .  [T_newline, T_comma, T_Rparan, T_colon, T_elif, T_else, T_or, T_and]

    T_star           shift, and go to state 55
    T_plus           shift, and go to state 62
    T_minus          shift, and go to state 63
    T_divide         shift, and go to state 64
    T_mod            shift, and go to state 65
    T_double_divide  shift, and go to state 66
    T_double_star    shift, and go to state 67

    $default  reduce using rule 37 (expression)


state 88

   21 arith_exp: arith_exp . T_plus arith_exp  [T_newline, T_comma, T_Rparan, T_colon, T_elif, T_else, T_or, T_and, T_lt, T_gt, T_deq, T_ge, T_le, T_noteq, T_plus, T_minus]
   21          | arith_exp T_plus arith_exp .  [T_newline, T_comma, T_Rparan, T_colon, T_elif, T_else, T_or, T_and, T_lt, T_gt, T_deq, T_ge, T_le, T_noteq, T_plus, T_minus]
   22          | arith_exp . T_minus arith_exp
   23          | arith_exp . T_star arith_exp
   24          | arith_exp . T_divide arith_exp
   25          | arith_exp . T_double_divide arith_exp
   26          | arith_exp . T_double_star arith_exp
   27          | arith_exp . T_mod arith_exp

    T_star           shift, and go to state 55
    T_divide         shift, and go to state 64
    T_mod            shift, and go to state 65
    T_double_divide  shift, and go to state 66
    T_double_star    shift, and go to state 67

    $default  reduce using rule 21 (arith_exp)

    Conflict between rule 21 and token T_star resolved as shift (T_plus < T_star).
    Conflict between rule 21 and token T_plus resolved as reduce (%left T_plus).
    Conflict between rule 21 and token T_minus resolved as reduce (%left T_minus).
    Conflict between rule 21 and token T_divide resolved as shift (T_plus < T_divide).
    Conflict between rule 21 and token T_mod resolved as shift (T_plus < T_mod).
    Conflict between rule 21 and token T_double_divide resolved as shift (T_plus < T_double_divide).
    Conflict between rule 21 and token T_double_star resolved as shift (T_plus < T_double_star).


state 89

   21 arith_exp: arith_exp . T_plus arith_exp
   22          | arith_exp . T_minus arith_exp  [T_newline, T_comma, T_Rparan, T_colon, T_elif, T_else, T_or, T_and, T_lt, T_gt, T_deq, T_ge, T_le, T_noteq, T_plus, T_minus]
   22          | arith_exp T_minus arith_exp .  [T_newline, T_comma, T_Rparan, T_colon, T_elif, T_else, T_or, T_and, T_lt, T_gt, T_deq, T_ge, T_le, T_noteq, T_plus, T_minus]
   23          | arith_exp . T_star arith_exp
   24          | arith_exp . T_divide arith_exp
   25          | arith_exp . T_double_divide arith_exp
   26          | arith_exp . T_double_star arith_exp
   27          | arith_exp . T_mod arith_exp

    T_star           shift, and go to state 55
    T_divide         shift, and go to state 64
    T_mod            shift, and go to state 65
    T_double_divide  shift, and go to state 66
    T_double_star    shift, and go to state 67

    $default  reduce using rule 22 (arith_exp)

    Conflict between rule 22 and token T_star resolved as shift (T_minus < T_star).
    Conflict between rule 22 and token T_plus resolved as reduce (%left T_plus).
    Conflict between rule 22 and token T_minus resolved as reduce (%left T_minus).
    Conflict between rule 22 and token T_divide resolved as shift (T_minus < T_divide).
    Conflict between rule 22 and token T_mod resolved as shift (T_minus < T_mod).
    Conflict between rule 22 and token T_double_divide resolved as shift (T_minus < T_double_divide).
    Conflict between rule 22 and token T_double_star resolved as shift (T_minus < T_double_star).


state 90

   21 arith_exp: arith_exp . T_plus arith_exp
   22          | arith_exp . T_minus arith_exp
   23          | arith_exp . T_star arith_exp
   24          | arith_exp . T_divide arith_exp  [T_newline, T_comma, T_star, T_Rparan, T_colon, T_elif, T_else, T_or, T_and, T_lt, T_gt, T_deq, T_ge, T_le, T_noteq, T_plus, T_minus, T_divide, T_mod, T_double_divide]
   24          | arith_exp T_divide arith_exp .  [T_newline, T_comma, T_star, T_Rparan, T_colon, T_elif, T_else, T_or, T_and, T_lt, T_gt, T_deq, T_ge, T_le, T_noteq, T_plus, T_minus, T_divide, T_mod, T_double_divide]
   25          | arith_exp . T_double_divide arith_exp
   26          | arith_exp . T_double_star arith_exp
   27          | arith_exp . T_mod arith_exp

    T_double_star  shift, and go to state 67

    $default  reduce using rule 24 (arith_exp)

    Conflict between rule 24 and token T_star resolved as reduce (%left T_star).
    Conflict between rule 24 and token T_plus resolved as reduce (T_plus < T_divide).
    Conflict between rule 24 and token T_minus resolved as reduce (T_minus < T_divide).
    Conflict between rule 24 and token T_divide resolved as reduce (%left T_divide).
    Conflict between rule 24 and token T_mod resolved as reduce (%left T_mod).
    Conflict between rule 24 and token T_double_divide resolved as reduce (%left T_double_divide).
    Conflict between rule 24 and token T_double_star resolved as shift (T_divide < T_double_star).


state 91

   21 arith_exp: arith_exp . T_plus arith_exp
   22          | arith_exp . T_minus arith_exp
   23          | arith_exp . T_star arith_exp
   24          | arith_exp . T_divide arith_exp
   25          | arith_exp . T_double_divide arith_exp
   26          | arith_exp . T_double_star arith_exp
   27          | arith_exp . T_mod arith_exp  [T_newline, T_comma, T_star, T_Rparan, T_colon, T_elif, T_else, T_or, T_and, T_lt, T_gt, T_deq, T_ge, T_le, T_noteq, T_plus, T_minus, T_divide, T_mod, T_double_divide]
   27          | arith_exp T_mod arith_exp .  [T_newline, T_comma, T_star, T_Rparan, T_colon, T_elif, T_else, T_or, T_and, T_lt, T_gt, T_deq, T_ge, T_le, T_noteq, T_plus, T_minus, T_divide, T_mod, T_double_divide]

    T_double_star  shift, and go to state 67

    $default  reduce using rule 27 (arith_exp)

    Conflict between rule 27 and token T_star resolved as reduce (%left T_star).
    Conflict between rule 27 and token T_plus resolved as reduce (T_plus < T_mod).
    Conflict between rule 27 and token T_minus resolved as reduce (T_minus < T_mod).
    Conflict between rule 27 and token T_divide resolved as reduce (%left T_divide).
    Conflict between rule 27 and token T_mod resolved as reduce (%left T_mod).
    Conflict between rule 27 and token T_double_divide resolved as reduce (%left T_double_divide).
    Conflict between rule 27 and token T_double_star resolved as shift (T_mod < T_double_star).


state 92

   21 arith_exp: arith_exp . T_plus arith_exp
   22          | arith_exp . T_minus arith_exp
   23          | arith_exp . T_star arith_exp
   24          | arith_exp . T_divide arith_exp
   25          | arith_exp . T_double_divide arith_exp  [T_newline, T_comma, T_star, T_Rparan, T_colon, T_elif, T_else, T_or, T_and, T_lt, T_gt, T_deq, T_ge, T_le, T_noteq, T_plus, T_minus, T_divide, T_mod, T_double_divide]
   25          | arith_exp T_double_divide arith_exp .  [T_newline, T_comma, T_star, T_Rparan, T_colon, T_elif, T_else, T_or, T_and, T_lt, T_gt, T_deq, T_ge, T_le, T_noteq, T_plus, T_minus, T_divide, T_mod, T_double_divide]
   26          | arith_exp . T_double_star arith_exp
   27          | arith_exp . T_mod arith_exp

    T_double_star  shift, and go to state 67

    $default  reduce using rule 25 (arith_exp)

    Conflict between rule 25 and token T_star resolved as reduce (%left T_star).
    Conflict between rule 25 and token T_plus resolved as reduce (T_plus < T_double_divide).
    Conflict between rule 25 and token T_minus resolved as reduce (T_minus < T_double_divide).
    Conflict between rule 25 and token T_divide resolved as reduce (%left T_divide).
    Conflict between rule 25 and token T_mod resolved as reduce (%left T_mod).
    Conflict between rule 25 and token T_double_divide resolved as reduce (%left T_double_divide).
    Conflict between rule 25 and token T_double_star resolved as shift (T_double_divide < T_double_star).


state 93

   21 arith_exp: arith_exp . T_plus arith_exp
   22          | arith_exp . T_minus arith_exp
   23          | arith_exp . T_star arith_exp
   24          | arith_exp . T_divide arith_exp
   25          | arith_exp . T_double_divide arith_exp
   26          | arith_exp . T_double_star arith_exp  [T_newline, T_comma, T_star, T_Rparan, T_colon, T_elif, T_else, T_or, T_and, T_lt, T_gt, T_deq, T_ge, T_le, T_noteq, T_plus, T_minus, T_divide, T_mod, T_double_divide, T_double_star]
   26          | arith_exp T_double_star arith_exp .  [T_newline, T_comma, T_star, T_Rparan, T_colon, T_elif, T_else, T_or, T_and, T_lt, T_gt, T_deq, T_ge, T_le, T_noteq, T_plus, T_minus, T_divide, T_mod, T_double_divide, T_double_star]
   27          | arith_exp . T_mod arith_exp

    $default  reduce using rule 26 (arith_exp)

    Conflict between rule 26 and token T_star resolved as reduce (T_star < T_double_star).
    Conflict between rule 26 and token T_plus resolved as reduce (T_plus < T_double_star).
    Conflict between rule 26 and token T_minus resolved as reduce (T_minus < T_double_star).
    Conflict between rule 26 and token T_divide resolved as reduce (T_divide < T_double_star).
    Conflict between rule 26 and token T_mod resolved as reduce (T_mod < T_double_star).
    Conflict between rule 26 and token T_double_divide resolved as reduce (T_double_divide < T_double_star).
    Conflict between rule 26 and token T_double_star resolved as reduce (%left T_double_star).


state 94

   40 expressions: expression T_comma expressions .

    $default  reduce using rule 40 (expressions)


state 95

   29 expression: expression . T_or expression  [T_newline, T_comma, T_Rparan, T_colon, T_elif, T_else, T_or, T_and]
   29           | expression T_or expression .  [T_newline, T_comma, T_Rparan, T_colon, T_elif, T_else, T_or, T_and]
   31           | expression . T_and expression

    $default  reduce using rule 29 (expression)

    Conflict between rule 29 and token T_or resolved as reduce (%left T_or).
    Conflict between rule 29 and token T_and resolved as reduce (%left T_and).


state 96

   29 expression: expression . T_or expression
   31           | expression . T_and expression  [T_newline, T_comma, T_Rparan, T_colon, T_elif, T_else, T_or, T_and]
   31           | expression T_and expression .  [T_newline, T_comma, T_Rparan, T_colon, T_elif, T_else, T_or, T_and]

    $default  reduce using rule 31 (expression)

    Conflict between rule 31 and token T_or resolved as reduce (%left T_or).
    Conflict between rule 31 and token T_and resolved as reduce (%left T_and).


state 97

   41 atom: . T_name
   42     | . constant
   43     | . T_none
   44     | . T_true
   45     | . T_false
   46     | . func_call
   62 constant: . T_number
   63         | . T_string
   69 func_call: . T_name T_Lparan call_args T_Rparan
   71 call_list: T_comma . atom call_list

    T_name    shift, and go to state 44
    T_number  shift, and go to state 2
    T_string  shift, and go to state 3
    T_none    shift, and go to state 14
    T_true    shift, and go to state 15
    T_false   shift, and go to state 16

    atom       go to state 110
    constant   go to state 31
    func_call  go to state 33


state 98

   73 call_args: T_name call_list .

    $default  reduce using rule 73 (call_args)


state 99

   74 call_args: constant call_list .

    $default  reduce using rule 74 (call_args)


state 100

   69 func_call: T_name T_Lparan call_args T_Rparan .

    $default  reduce using rule 69 (func_call)


state 101

    3 file_input: .  [T_Racco]
    4           | . T_newline file_input
    5           | . stmt file_input
    6 stmt: . simple_stmt T_newline
    7     | . compound_stmt T_newline
    8 simple_stmt: . T_break
    9            | . T_continue
   10            | . assign_stmt
   11            | . expressions
   12            | . return_stmt
   13 assign_stmt: . T_name aff expression
   20 arith_exp: . atom
   21          | . arith_exp T_plus arith_exp
   22          | . arith_exp T_minus arith_exp
   23          | . arith_exp T_star arith_exp
   24          | . arith_exp T_divide arith_exp
   25          | . arith_exp T_double_divide arith_exp
   26          | . arith_exp T_double_star arith_exp
   27          | . arith_exp T_mod arith_exp
   28          | . T_minus arith_exp
   29 expression: . expression T_or expression
   30           | . arith_exp T_lt arith_exp
   31           | . expression T_and expression
   32           | . arith_exp T_gt arith_exp
   33           | . arith_exp T_le arith_exp
   34           | . arith_exp T_ge arith_exp
   35           | . T_Lparan expression T_Rparan
   36           | . arith_exp T_deq arith_exp
   37           | . arith_exp T_noteq arith_exp
   38           | . arith_exp
   39 expressions: . expression
   40            | . expression T_comma expressions
   41 atom: . T_name
   42     | . constant
   43     | . T_none
   44     | . T_true
   45     | . T_false
   46     | . func_call
   47 compound_stmt: . if_stmt
   48              | . while_stmt
   49              | . for_stmt
   50              | . func_def
   51 if_stmt: . T_if expression T_colon block
   52        | . T_if expression T_colon block elif_stmts
   56 while_stmt: . T_while expression T_colon block
   57 for_stmt: . T_for T_name T_from for_atom T_to for_atom T_with for_atom T_colon block
   61 block: T_Lacco . file_input T_Racco
   62 constant: . T_number
   63         | . T_string
   64 func_def: . T_def T_name T_Lparan args T_Rparan T_colon block
   69 func_call: . T_name T_Lparan call_args T_Rparan
   75 return_stmt: . T_return expression
   76            | . T_return

    T_name      shift, and go to state 1
    T_number    shift, and go to state 2
    T_string    shift, and go to state 3
    T_newline   shift, and go to state 4
    T_while     shift, and go to state 6
    T_break     shift, and go to state 7
    T_continue  shift, and go to state 8
    T_return    shift, and go to state 9
    T_Lparan    shift, and go to state 10
    T_if        shift, and go to state 11
    T_for       shift, and go to state 12
    T_minus     shift, and go to state 13
    T_none      shift, and go to state 14
    T_true      shift, and go to state 15
    T_false     shift, and go to state 16
    T_def       shift, and go to state 17

    $default  reduce using rule 3 (file_input)

    file_input     go to state 111
    stmt           go to state 20
    simple_stmt    go to state 21
    assign_stmt    go to state 22
    arith_exp      go to state 23
    expression     go to state 24
    expressions    go to state 25
    atom           go to state 26
    compound_stmt  go to state 27
    if_stmt        go to state 28
    while_stmt     go to state 29
    for_stmt       go to state 30
    constant       go to state 31
    func_def       go to state 32
    func_call      go to state 33
    return_stmt    go to state 34


state 102

   60 block: simple_stmt .

    $default  reduce using rule 60 (block)


state 103

   56 while_stmt: T_while expression T_colon block .

    $default  reduce using rule 56 (while_stmt)


state 104

   51 if_stmt: T_if expression T_colon block .  [T_newline]
   52        | T_if expression T_colon block . elif_stmts
   53 elif_stmts: . else_stmt
   54           | . T_elif expression T_colon block elif_stmts
   55 else_stmt: . T_else T_colon block

    T_elif  shift, and go to state 112
    T_else  shift, and go to state 113

    $default  reduce using rule 51 (if_stmt)

    elif_stmts  go to state 114
    else_stmt   go to state 115


state 105

   58 for_atom: T_name .

    $default  reduce using rule 58 (for_atom)


state 106

   59 for_atom: T_number .

    $default  reduce using rule 59 (for_atom)


state 107

   57 for_stmt: T_for T_name T_from for_atom . T_to for_atom T_with for_atom T_colon block

    T_to  shift, and go to state 116


state 108

   66 args: T_name . args_list
   67 args_list: .  [T_Rparan]
   68          | . T_comma T_name args_list

    T_comma  shift, and go to state 117

    $default  reduce using rule 67 (args_list)

    args_list  go to state 118


state 109

   64 func_def: T_def T_name T_Lparan args . T_Rparan T_colon block

    T_Rparan  shift, and go to state 119


state 110

   70 call_list: .  [T_Rparan]
   71          | . T_comma atom call_list
   71          | T_comma atom . call_list

    T_comma  shift, and go to state 97

    $default  reduce using rule 70 (call_list)

    call_list  go to state 120


state 111

   61 block: T_Lacco file_input . T_Racco

    T_Racco  shift, and go to state 121


state 112

   20 arith_exp: . atom
   21          | . arith_exp T_plus arith_exp
   22          | . arith_exp T_minus arith_exp
   23          | . arith_exp T_star arith_exp
   24          | . arith_exp T_divide arith_exp
   25          | . arith_exp T_double_divide arith_exp
   26          | . arith_exp T_double_star arith_exp
   27          | . arith_exp T_mod arith_exp
   28          | . T_minus arith_exp
   29 expression: . expression T_or expression
   30           | . arith_exp T_lt arith_exp
   31           | . expression T_and expression
   32           | . arith_exp T_gt arith_exp
   33           | . arith_exp T_le arith_exp
   34           | . arith_exp T_ge arith_exp
   35           | . T_Lparan expression T_Rparan
   36           | . arith_exp T_deq arith_exp
   37           | . arith_exp T_noteq arith_exp
   38           | . arith_exp
   41 atom: . T_name
   42     | . constant
   43     | . T_none
   44     | . T_true
   45     | . T_false
   46     | . func_call
   54 elif_stmts: T_elif . expression T_colon block elif_stmts
   62 constant: . T_number
   63         | . T_string
   69 func_call: . T_name T_Lparan call_args T_Rparan

    T_name    shift, and go to state 44
    T_number  shift, and go to state 2
    T_string  shift, and go to state 3
    T_Lparan  shift, and go to state 10
    T_minus   shift, and go to state 13
    T_none    shift, and go to state 14
    T_true    shift, and go to state 15
    T_false   shift, and go to state 16

    arith_exp   go to state 23
    expression  go to state 122
    atom        go to state 26
    constant    go to state 31
    func_call   go to state 33


state 113

   55 else_stmt: T_else . T_colon block

    T_colon  shift, and go to state 123


state 114

   52 if_stmt: T_if expression T_colon block elif_stmts .

    $default  reduce using rule 52 (if_stmt)


state 115

   53 elif_stmts: else_stmt .

    $default  reduce using rule 53 (elif_stmts)


state 116

   57 for_stmt: T_for T_name T_from for_atom T_to . for_atom T_with for_atom T_colon block
   58 for_atom: . T_name
   59         | . T_number

    T_name    shift, and go to state 105
    T_number  shift, and go to state 106

    for_atom  go to state 124


state 117

   68 args_list: T_comma . T_name args_list

    T_name  shift, and go to state 125


state 118

   66 args: T_name args_list .

    $default  reduce using rule 66 (args)


state 119

   64 func_def: T_def T_name T_Lparan args T_Rparan . T_colon block

    T_colon  shift, and go to state 126


state 120

   71 call_list: T_comma atom call_list .

    $default  reduce using rule 71 (call_list)


state 121

   61 block: T_Lacco file_input T_Racco .

    $default  reduce using rule 61 (block)


state 122

   29 expression: expression . T_or expression
   31           | expression . T_and expression
   54 elif_stmts: T_elif expression . T_colon block elif_stmts

    T_colon  shift, and go to state 127
    T_or     shift, and go to state 69
    T_and    shift, and go to state 70


state 123

    8 simple_stmt: . T_break
    9            | . T_continue
   10            | . assign_stmt
   11            | . expressions
   12            | . return_stmt
   13 assign_stmt: . T_name aff expression
   20 arith_exp: . atom
   21          | . arith_exp T_plus arith_exp
   22          | . arith_exp T_minus arith_exp
   23          | . arith_exp T_star arith_exp
   24          | . arith_exp T_divide arith_exp
   25          | . arith_exp T_double_divide arith_exp
   26          | . arith_exp T_double_star arith_exp
   27          | . arith_exp T_mod arith_exp
   28          | . T_minus arith_exp
   29 expression: . expression T_or expression
   30           | . arith_exp T_lt arith_exp
   31           | . expression T_and expression
   32           | . arith_exp T_gt arith_exp
   33           | . arith_exp T_le arith_exp
   34           | . arith_exp T_ge arith_exp
   35           | . T_Lparan expression T_Rparan
   36           | . arith_exp T_deq arith_exp
   37           | . arith_exp T_noteq arith_exp
   38           | . arith_exp
   39 expressions: . expression
   40            | . expression T_comma expressions
   41 atom: . T_name
   42     | . constant
   43     | . T_none
   44     | . T_true
   45     | . T_false
   46     | . func_call
   55 else_stmt: T_else T_colon . block
   60 block: . simple_stmt
   61      | . T_Lacco file_input T_Racco
   62 constant: . T_number
   63         | . T_string
   69 func_call: . T_name T_Lparan call_args T_Rparan
   75 return_stmt: . T_return expression
   76            | . T_return

    T_name      shift, and go to state 1
    T_number    shift, and go to state 2
    T_string    shift, and go to state 3
    T_Lacco     shift, and go to state 101
    T_break     shift, and go to state 7
    T_continue  shift, and go to state 8
    T_return    shift, and go to state 9
    T_Lparan    shift, and go to state 10
    T_minus     shift, and go to state 13
    T_none      shift, and go to state 14
    T_true      shift, and go to state 15
    T_false     shift, and go to state 16

    simple_stmt  go to state 102
    assign_stmt  go to state 22
    arith_exp    go to state 23
    expression   go to state 24
    expressions  go to state 25
    atom         go to state 26
    block        go to state 128
    constant     go to state 31
    func_call    go to state 33
    return_stmt  go to state 34


state 124

   57 for_stmt: T_for T_name T_from for_atom T_to for_atom . T_with for_atom T_colon block

    T_with  shift, and go to state 129


state 125

   67 args_list: .  [T_Rparan]
   68          | . T_comma T_name args_list
   68          | T_comma T_name . args_list

    T_comma  shift, and go to state 117

    $default  reduce using rule 67 (args_list)

    args_list  go to state 130


state 126

    8 simple_stmt: . T_break
    9            | . T_continue
   10            | . assign_stmt
   11            | . expressions
   12            | . return_stmt
   13 assign_stmt: . T_name aff expression
   20 arith_exp: . atom
   21          | . arith_exp T_plus arith_exp
   22          | . arith_exp T_minus arith_exp
   23          | . arith_exp T_star arith_exp
   24          | . arith_exp T_divide arith_exp
   25          | . arith_exp T_double_divide arith_exp
   26          | . arith_exp T_double_star arith_exp
   27          | . arith_exp T_mod arith_exp
   28          | . T_minus arith_exp
   29 expression: . expression T_or expression
   30           | . arith_exp T_lt arith_exp
   31           | . expression T_and expression
   32           | . arith_exp T_gt arith_exp
   33           | . arith_exp T_le arith_exp
   34           | . arith_exp T_ge arith_exp
   35           | . T_Lparan expression T_Rparan
   36           | . arith_exp T_deq arith_exp
   37           | . arith_exp T_noteq arith_exp
   38           | . arith_exp
   39 expressions: . expression
   40            | . expression T_comma expressions
   41 atom: . T_name
   42     | . constant
   43     | . T_none
   44     | . T_true
   45     | . T_false
   46     | . func_call
   60 block: . simple_stmt
   61      | . T_Lacco file_input T_Racco
   62 constant: . T_number
   63         | . T_string
   64 func_def: T_def T_name T_Lparan args T_Rparan T_colon . block
   69 func_call: . T_name T_Lparan call_args T_Rparan
   75 return_stmt: . T_return expression
   76            | . T_return

    T_name      shift, and go to state 1
    T_number    shift, and go to state 2
    T_string    shift, and go to state 3
    T_Lacco     shift, and go to state 101
    T_break     shift, and go to state 7
    T_continue  shift, and go to state 8
    T_return    shift, and go to state 9
    T_Lparan    shift, and go to state 10
    T_minus     shift, and go to state 13
    T_none      shift, and go to state 14
    T_true      shift, and go to state 15
    T_false     shift, and go to state 16

    simple_stmt  go to state 102
    assign_stmt  go to state 22
    arith_exp    go to state 23
    expression   go to state 24
    expressions  go to state 25
    atom         go to state 26
    block        go to state 131
    constant     go to state 31
    func_call    go to state 33
    return_stmt  go to state 34


state 127

    8 simple_stmt: . T_break
    9            | . T_continue
   10            | . assign_stmt
   11            | . expressions
   12            | . return_stmt
   13 assign_stmt: . T_name aff expression
   20 arith_exp: . atom
   21          | . arith_exp T_plus arith_exp
   22          | . arith_exp T_minus arith_exp
   23          | . arith_exp T_star arith_exp
   24          | . arith_exp T_divide arith_exp
   25          | . arith_exp T_double_divide arith_exp
   26          | . arith_exp T_double_star arith_exp
   27          | . arith_exp T_mod arith_exp
   28          | . T_minus arith_exp
   29 expression: . expression T_or expression
   30           | . arith_exp T_lt arith_exp
   31           | . expression T_and expression
   32           | . arith_exp T_gt arith_exp
   33           | . arith_exp T_le arith_exp
   34           | . arith_exp T_ge arith_exp
   35           | . T_Lparan expression T_Rparan
   36           | . arith_exp T_deq arith_exp
   37           | . arith_exp T_noteq arith_exp
   38           | . arith_exp
   39 expressions: . expression
   40            | . expression T_comma expressions
   41 atom: . T_name
   42     | . constant
   43     | . T_none
   44     | . T_true
   45     | . T_false
   46     | . func_call
   54 elif_stmts: T_elif expression T_colon . block elif_stmts
   60 block: . simple_stmt
   61      | . T_Lacco file_input T_Racco
   62 constant: . T_number
   63         | . T_string
   69 func_call: . T_name T_Lparan call_args T_Rparan
   75 return_stmt: . T_return expression
   76            | . T_return

    T_name      shift, and go to state 1
    T_number    shift, and go to state 2
    T_string    shift, and go to state 3
    T_Lacco     shift, and go to state 101
    T_break     shift, and go to state 7
    T_continue  shift, and go to state 8
    T_return    shift, and go to state 9
    T_Lparan    shift, and go to state 10
    T_minus     shift, and go to state 13
    T_none      shift, and go to state 14
    T_true      shift, and go to state 15
    T_false     shift, and go to state 16

    simple_stmt  go to state 102
    assign_stmt  go to state 22
    arith_exp    go to state 23
    expression   go to state 24
    expressions  go to state 25
    atom         go to state 26
    block        go to state 132
    constant     go to state 31
    func_call    go to state 33
    return_stmt  go to state 34


state 128

   55 else_stmt: T_else T_colon block .

    $default  reduce using rule 55 (else_stmt)


state 129

   57 for_stmt: T_for T_name T_from for_atom T_to for_atom T_with . for_atom T_colon block
   58 for_atom: . T_name
   59         | . T_number

    T_name    shift, and go to state 105
    T_number  shift, and go to state 106

    for_atom  go to state 133


state 130

   68 args_list: T_comma T_name args_list .

    $default  reduce using rule 68 (args_list)


state 131

   64 func_def: T_def T_name T_Lparan args T_Rparan T_colon block .

    $default  reduce using rule 64 (func_def)


state 132

   53 elif_stmts: . else_stmt
   54           | . T_elif expression T_colon block elif_stmts
   54           | T_elif expression T_colon block . elif_stmts
   55 else_stmt: . T_else T_colon block

    T_elif  shift, and go to state 112
    T_else  shift, and go to state 113

    elif_stmts  go to state 134
    else_stmt   go to state 115


state 133

   57 for_stmt: T_for T_name T_from for_atom T_to for_atom T_with for_atom . T_colon block

    T_colon  shift, and go to state 135


state 134

   54 elif_stmts: T_elif expression T_colon block elif_stmts .

    $default  reduce using rule 54 (elif_stmts)


state 135

    8 simple_stmt: . T_break
    9            | . T_continue
   10            | . assign_stmt
   11            | . expressions
   12            | . return_stmt
   13 assign_stmt: . T_name aff expression
   20 arith_exp: . atom
   21          | . arith_exp T_plus arith_exp
   22          | . arith_exp T_minus arith_exp
   23          | . arith_exp T_star arith_exp
   24          | . arith_exp T_divide arith_exp
   25          | . arith_exp T_double_divide arith_exp
   26          | . arith_exp T_double_star arith_exp
   27          | . arith_exp T_mod arith_exp
   28          | . T_minus arith_exp
   29 expression: . expression T_or expression
   30           | . arith_exp T_lt arith_exp
   31           | . expression T_and expression
   32           | . arith_exp T_gt arith_exp
   33           | . arith_exp T_le arith_exp
   34           | . arith_exp T_ge arith_exp
   35           | . T_Lparan expression T_Rparan
   36           | . arith_exp T_deq arith_exp
   37           | . arith_exp T_noteq arith_exp
   38           | . arith_exp
   39 expressions: . expression
   40            | . expression T_comma expressions
   41 atom: . T_name
   42     | . constant
   43     | . T_none
   44     | . T_true
   45     | . T_false
   46     | . func_call
   57 for_stmt: T_for T_name T_from for_atom T_to for_atom T_with for_atom T_colon . block
   60 block: . simple_stmt
   61      | . T_Lacco file_input T_Racco
   62 constant: . T_number
   63         | . T_string
   69 func_call: . T_name T_Lparan call_args T_Rparan
   75 return_stmt: . T_return expression
   76            | . T_return

    T_name      shift, and go to state 1
    T_number    shift, and go to state 2
    T_string    shift, and go to state 3
    T_Lacco     shift, and go to state 101
    T_break     shift, and go to state 7
    T_continue  shift, and go to state 8
    T_return    shift, and go to state 9
    T_Lparan    shift, and go to state 10
    T_minus     shift, and go to state 13
    T_none      shift, and go to state 14
    T_true      shift, and go to state 15
    T_false     shift, and go to state 16

    simple_stmt  go to state 102
    assign_stmt  go to state 22
    arith_exp    go to state 23
    expression   go to state 24
    expressions  go to state 25
    atom         go to state 26
    block        go to state 136
    constant     go to state 31
    func_call    go to state 33
    return_stmt  go to state 34


state 136

   57 for_stmt: T_for T_name T_from for_atom T_to for_atom T_with for_atom T_colon block .

    $default  reduce using rule 57 (for_stmt)
